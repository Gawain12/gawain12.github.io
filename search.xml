<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DeepLearningTextCNN</title>
    <url>/2021/06/25/DeepLearningTextCNN/</url>
    <content><![CDATA[<h1 id="深度学习算法背景"><a href="#深度学习算法背景" class="headerlink" title="深度学习算法背景"></a>深度学习算法背景</h1><h2 id="人工智能发展历史"><a href="#人工智能发展历史" class="headerlink" title="人工智能发展历史"></a>人工智能发展历史</h2><p><img src="https://img-blog.csdnimg.cn/20210625145012667.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dhd2FpblRreQ==,size_16,color_FFFFFF,t_70" alt="人工智能的发展历史"><br>随着算力提高以及深度学习的应用，近几年算法发展很快</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li><strong>计算机视觉</strong> 用于车牌识别和面部识别等的应用。<ul>
<li><strong>信息检索</strong> 用于诸如搜索引擎的应用 - 包括文本搜索和图像搜索。</li>
<li><strong>市场营销</strong> 针对自动电子邮件营销和目标群体识别等的应用。</li>
<li><strong>医疗诊断</strong> 诸如癌症识别和异常检测等的应用。</li>
<li><strong>自然语言处理</strong> 如情绪分析和照片标记标题归类等的应用。</li>
</ul>
</li>
</ul>
<h2 id="机器学习和深度学习关系与区别"><a href="#机器学习和深度学习关系与区别" class="headerlink" title="机器学习和深度学习关系与区别"></a>机器学习和深度学习关系与区别</h2><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>深度学习定义：深度学习是一种特殊的机器学习，通过学习将世界使用嵌套的概念层次来表示并实现巨大的功能和灵活性，其中每个概念都定义为与简单概念相关联，而更为抽象的表示则以较不抽象的方式来计算。</p>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>深度学习对比常规的的机器学习来说，它需要训练的数据更多，而且参数可以自动调节，机器学习通常cpu也能训练，但是深度学习需要显卡训练</p>
<h1 id="TextCNN算法原理"><a href="#TextCNN算法原理" class="headerlink" title="TextCNN算法原理"></a>TextCNN算法原理</h1><p>若有兴趣可以看这篇文章：<a href="http://www.wildml.com/2015/11/understanding-convolutional-neural-networks-for-nlp/" target="_blank" rel="noopener"><em>Understanding Convolutional Neural Networks for NLP</em></a></p>
<p>Yoon Kim于2014年发表论文<a href="https://arxiv.org/pdf/1408.5882.pdf" target="_blank" rel="noopener"><em>Convolutional Neural Networks for Sentence Classification</em></a>将CNN第一次引入NLP（自然语言处理）的应用，此前CNN几乎都是应用于图像识别领域。</p>
<h2 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h2><p>CNN全称 Convolutional Neural Networks ，卷积神经网络，正如他的名字他的灵感来源是人的神经结构，最先由科学家杨立昆(Yann Lee Cun)提出，</p>
<p>何谓卷积，就是利用一种数学方法提取信息的特征。对于图片用矩阵可以很好描述像素点的分布特征，<br><img src="https://img-blog.csdnimg.cn/20210625160149731.gif" alt="在这里插入图片描述"><br>动图理解卷积运算的过程，</p>
<h2 id="TextCNN结构"><a href="#TextCNN结构" class="headerlink" title="TextCNN结构"></a>TextCNN结构</h2><p><img src="https://img-blog.csdnimg.cn/20210625151005390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dhd2FpblRreQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="嵌入层-embedding-layer"><a href="#嵌入层-embedding-layer" class="headerlink" title="嵌入层(embedding layer)"></a>嵌入层(embedding layer)</h3><p><strong>TextCNN</strong>使用预先训练好的词向量作embedding layer。对于数据集里的所有词，因为每个词都可以表征成一个向量，因此我们可以得到一个嵌入矩阵MM, MM里的每一行都是词向量。这个MM可以是静态(static)的，也就是固定不变。可以是非静态(non-static)的，也就是可以根据反向传播更新。<br>多种模型：Convolutional Neural Networks for Sentence Classification文章中给出了几种模型，其实这里基本都是针对Embedding layer做的变化。<strong>CNN-rand、CNN-static、CNN-non-static、CNN-multichannel</strong><br>具体介绍及实验结果可见原论文，以上是学术定义</p>
<p>我个人理解是：<br>文字无法被直接被计算机识别，需要编码，将其映射为2维的矩阵</p>
<h3 id="卷积池化层-convolution-and-pooling"><a href="#卷积池化层-convolution-and-pooling" class="headerlink" title="卷积池化层(convolution and pooling)"></a>卷积池化层(convolution and pooling)</h3><h4 id="卷积-convolution"><a href="#卷积-convolution" class="headerlink" title="卷积(convolution)"></a>卷积(convolution)</h4><p>输入一个句子，首先对这个句子进行切词，假设有s个单词。对每个词，跟句嵌入矩阵M, 可以得到词向量。假设词向量一共有d维。那么对于这个句子，便可以得到s行d列的矩阵AϵRs×d.<br>我们可以把矩阵A看成是一幅图像，使用卷积神经网络去提取特征。由于句子中相邻的单词关联性总是很高的，因此可以使用一维卷积，即文本卷积与图像卷积的不同之处在于只在文本序列的一个方向（垂直）做卷积，卷积核的宽度固定为词向量的维度d。高度是超参数，可以设置。 对句子单词每个可能的窗口做卷积操作得到特征图(feature map) c = [c_1, c_2, …, c_s-h+1]。</p>
<p>现在假设有一个卷积核，是宽度为d，高度为h的矩阵w，那么w有h∗d个参数需要被更新。对于一个句子，经过嵌入层之后可以得到矩阵AϵRs×d。 A[i:j]表示A的第i行到第j行, 那么卷积操作可以用公式表示：o<del>i</del> = w · A[i : i + h − 1] , i = 1 . . . s − h + 1<br>叠加上偏置b,在使用激活函数f激活, 得到所需的特征。公式如下：c<del>i</del> = f(o<del>i</del> + b). </p>
<p>对一个卷积核，可以得到特征cϵRs−h+1, 总共s−h+1个特征。我们可以使用更多高h不同的卷积核，得到更丰富的特征表达。</p>
<p>Note: </p>
<ol>
<li><p>TextCNN网络包括很多不同窗口大小的卷积核，常用的filter size ∈ {3,4,5}，每个filter的feature maps=100。这里的特征图就是不同的k元语法。如上图中分别有两个不同的二、三和四元语法。<br>如果设置padding=’same’即使用宽卷积，则每个feature maps for each region size都是seq_len<em>1，所有的feature map可以拼接成seq_len</em>(num_filters*num_filter_size)的矩阵，回到输入类似维度，这样就可以使用多层cnn了。</p>
</li>
<li><p>通道（Channels）：图像中可以利用 (R, G, B) 作为不同channel。而文本的输入的channel通常是不同方式的embedding方式（比如 word2vec或Glove），实践中也有利用静态词向量和fine-tunning词向量作为不同channel的做法；channel也可以一个是词序列，另一个channel是对应的词性序列。接下来就可以通过加和或者拼接进行结合。</p>
</li>
</ol>
<h3 id="池化-pooling"><a href="#池化-pooling" class="headerlink" title="池化(pooling)"></a>池化(pooling)</h3><p>不同尺寸的卷积核得到的特征(feature map)大小也是不一样的，因此我们对每个feature map使用池化函数，使它们的维度相同。</p>
<h5 id="Max-Pooling"><a href="#Max-Pooling" class="headerlink" title="Max Pooling"></a>Max Pooling</h5><p>最常用的就是1-max pooling，提取出feature map照片那个的最大值，通过选择每个feature map的最大值，可捕获其最重要的特征。这样每一个卷积核得到特征就是一个值，对所有卷积核使用1-max pooling，再级联起来，可以得到最终的特征向量，这个特征向量再输入softmax layer做分类。这个地方可以使用drop out防止过拟合。</p>
<h5 id="Average-Pooling"><a href="#Average-Pooling" class="headerlink" title="Average Pooling"></a>Average Pooling</h5><p>average pooling即取每个维度的均值而不是最大值。理解是对句子中的连续词袋(CBOW)而不是词进行卷积得到的表示（lz：每个filter都是对cbow来的）。<br>其他池化方式K-Max Pooling、动态k-max pooling可见论文<a href="https://www.cnblogs.com/szxspark/p/10262681.html" target="_blank" rel="noopener">《Event Extraction via Dynamic Multi-Pooling Convolutional Neural Network》</a>[2]</p>
<h3 id="简单模型结构的示例分析"><a href="#简单模型结构的示例分析" class="headerlink" title="简单模型结构的示例分析"></a>简单模型结构的示例分析</h3><p>分析<a href="http://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1510.03820.pdf">《A Sensitivity Analysis …》</a>[2]模型示意图：</p>
<p><img src="https://img-blog.csdnimg.cn/20210625174913227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dhd2FpblRreQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>word embedding的维度是5，对于句子 i like this movie very much，转换成矩阵AϵR7×5；<br>有6个卷积核，尺寸为(2×5), (3×5), (4×5)，每种尺寸各2个，A分别与以上卷积核进行卷积操作（这里的Stride Size相当于等于高度h）；</p>
<p>再用激活函数激活，每个卷积核得到了特征向量(feature maps)；<br>使用1-max pooling提取出每个feature map的最大值；</p>
<p>然后在级联得到最终的特征表达；<br>将特征输入至softmax layer进行分类, 在这层可以进行正则化操作( l2-regulariation)。</p>
<h2 id="实验参数分析"><a href="#实验参数分析" class="headerlink" title="实验参数分析"></a>实验参数分析</h2><p>TextCNN模型中，超参数主要有词向量，Region Size的大小，Feature Map的数量，激活函数的选择，Pooling的方法，正则化的影响。《A Sensitivity Analysis…》论文前面几章对实验内容和结果进行了详细介绍，在9个数据集上基于Kim Y的模型做了大量的调参实验，得出AUC进行比较，根据的实验对比：</p>
<p>1）<strong>初始化词向量</strong>：一般不直接使用One-hot。除了随机初始化Embedding layer的外，使用预训练的word2vec、 GloVe初始化的效果都更加好（具体哪个更好依赖于任务本身）。非静态的比静态的效果好一些。</p>
<p>2）<strong>卷积核的尺寸filter_sizes</strong>：影响较大，通常过滤器的大小范围在1-10之间，一般取为3-5，对于句子较长的文本（100+），则应选择大一些。为了找到最优的过滤器大小(Filter Region Size)，可以使用线性搜索的方法。对不同尺寸ws的窗口进行结合会对结果产生影响。当把与最优ws相近的ws结合时会提升效果，但是如果将距离最优ws较远的ws相结合时会损害分类性能。刚开始，我们可以只用一个filter，调节Region Size来比对各自的效果，来看看那种size有最好的表现，然后在这个范围在调节不同Region的匹配。</p>
<p>3）<strong>卷积核的数量num_filters（对每个巻积核尺寸来说）</strong>：有较大的影响，一般取100<del>600（需要兼顾模型的训练效率） ，同时一般使用Dropout（0</del>0.5）。最好不要超过600，超过600可能会导致过拟合。可设为100-200。</p>
<p>4）<strong>激活函数</strong>：可以尽量多尝试激活函数，实验发现ReLU和tanh两种激活函数表现较佳。</p>
<p>5）<strong>池化选择</strong>：1-max pooling（1-max pooling的方式已经足够好了，相比于其他的pooling方式而言）。</p>
<p>6）<strong>Dropout和正则化</strong>：Dropout rate / dropout_keep_prob：dropout一般设为0.5。随着feature map数量增加，性能减少时，可以考虑增大正则化的力度，如尝试大于0.5的Dropout。</p>
<p>   正则化的作用微乎其微，正则项对最终模型性能的影响很小。l2正则化效益很小，所以这里建议设置一个比较大的L2 norm constrain，相比而言，dropout在神经网络中有着广泛的使用和很好的效果。</p>
<p>7）为了检验模型的性能水平，多次反复的交叉验证是必要的，这可以确保模型的高性能并不是偶然。</p>
<p>8） <strong>随机性影响</strong>：由于模型训练过程中的随机性因素，如随机初始化的权重参数，mini-batch，随机梯度下降优化算法等，造成模型在数据集上的结果有一定的浮动，如准确率(accuracy)能达到1.5%的浮动，而AUC则有3.4%的浮动。</p>
<p>其它的训练参数：batch_size：64；num_epochs：10；每checkpoint_every：100轮便保存模型；仅保存最近num_checkpoints：5次模型</p>
<h1 id="实现文本分类的过程"><a href="#实现文本分类的过程" class="headerlink" title="实现文本分类的过程"></a>实现文本分类的过程</h1><h2 id="Text-Classification-with-CNN"><a href="#Text-Classification-with-CNN" class="headerlink" title="Text Classification with CNN"></a>Text Classification with CNN</h2><p>使用卷积神经网络进行中文文本分类</p>
<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><ul>
<li>Python 3.6.8</li>
<li>TensorFlow 1.8.0</li>
<li>numpy</li>
<li>scikit-learn</li>
<li>scipy<h2 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h2></li>
<li>CPU:Ryzen 2500U(2.0GHZ)</li>
<li>Menmory: 16G</li>
<li><strong>注</strong>：轻薄本不适合训练深度学习，该环境运行10+小时，同时内存必须大于8G，不然会爆内存<h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2></li>
</ul>
<p>本训练集由predict_check_data表的17万条产品名称和对应分类组成。</p>
<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p><code>data_prepare.py</code>运行该程序，即可根据数据表，生成指定的训练，测试，验证集。</p>
<p><code>data/cnews_loader.py</code>为数据的预处理文件。</p>
<ul>
<li><code>read_file()</code>: 读取文件数据;</li>
<li><code>build_vocab()</code>: 构建词汇表，使用字符级的表示，这一函数会将词汇表存储下来，避免每一次重复处理;</li>
<li><code>read_vocab()</code>: 读取上一步存储的词汇表，转换为<code>{词：id}</code>表示;</li>
<li><code>read_category()</code>: 将分类目录固定，转换为<code>{类别: id}</code>表示;</li>
<li><code>to_words()</code>: 将一条由id表示的数据重新转换为文字;</li>
<li><code>process_file()</code>: 将数据集从文字转换为固定长度的id序列表示;</li>
<li><code>batch_iter()</code>: 为神经网络的训练准备经过shuffle的批次的数据。</li>
</ul>
<p>经过数据预处理，数据的格式如下：</p>
<table>
<thead>
<tr>
<th align="left">Data</th>
<th align="left">Shape</th>
<th align="left">Data</th>
<th align="left">Shape</th>
</tr>
</thead>
<tbody><tr>
<td align="left">x_train</td>
<td align="left">[50000, 600]</td>
<td align="left">y_train</td>
<td align="left">[50000, 10]</td>
</tr>
<tr>
<td align="left">x_val</td>
<td align="left">[5000, 600]</td>
<td align="left">y_val</td>
<td align="left">[5000, 10]</td>
</tr>
<tr>
<td align="left">x_test</td>
<td align="left">[10000, 600]</td>
<td align="left">y_test</td>
<td align="left">[10000, 10]</td>
</tr>
</tbody></table>
<h2 id="CNN卷积神经网络"><a href="#CNN卷积神经网络" class="headerlink" title="CNN卷积神经网络"></a>CNN卷积神经网络</h2><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p>CNN可配置的参数如下所示，在<code>cnn_model.py</code>中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCNNConfig</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""CNN配置参数"""</span></span><br><span class="line"></span><br><span class="line">    embedding_dim = <span class="number">128</span>  <span class="comment"># 词向量维度</span></span><br><span class="line">    seq_length = <span class="number">300</span>  <span class="comment"># 序列长度</span></span><br><span class="line">    <span class="comment"># num_classes = 668  # 类别数</span></span><br><span class="line">    num_filters = <span class="number">1024</span>  <span class="comment"># 卷积核数目</span></span><br><span class="line">    kernel_size = <span class="number">3</span>  <span class="comment"># 卷积核尺寸</span></span><br><span class="line">    vocab_size = <span class="number">8000</span>  <span class="comment"># 词汇表大小</span></span><br><span class="line"></span><br><span class="line">    hidden_dim = <span class="number">256</span>  <span class="comment"># 全连接层神经元</span></span><br><span class="line"></span><br><span class="line">    dropout_keep_prob = <span class="number">0.55</span>  <span class="comment"># dropout保留比例</span></span><br><span class="line">    learning_rate = <span class="number">1e-3</span>  <span class="comment"># 学习率</span></span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">64</span>  <span class="comment"># 每批训练大小</span></span><br><span class="line">    num_epochs = <span class="number">20</span>  <span class="comment"># 总迭代轮次</span></span><br><span class="line"></span><br><span class="line">    print_per_batch = <span class="number">100</span>  <span class="comment"># 每多少轮输出一次结果</span></span><br><span class="line">    save_per_batch = <span class="number">10</span>  <span class="comment"># 每多少轮存入tensorboard</span></span><br></pre></td></tr></table></figure>

<h3 id="CNN模型"><a href="#CNN模型" class="headerlink" title="CNN模型"></a>CNN模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextCNN</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""文本分类，CNN模型"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, config)</span>:</span></span><br><span class="line">        self.config = config</span><br><span class="line">        <span class="comment"># 三个待输入的数据</span></span><br><span class="line">        self.input_x = tf.placeholder(tf.int32, [<span class="literal">None</span>, self.config.seq_length], name=<span class="string">'input_x'</span>)</span><br><span class="line">        self.input_y = tf.placeholder(tf.float32, [<span class="literal">None</span>, self.config.num_classes], name=<span class="string">'input_y'</span>)</span><br><span class="line">        self.keep_prob = tf.placeholder(tf.float32, name=<span class="string">'keep_prob'</span>)</span><br><span class="line"></span><br><span class="line">        self.cnn()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cnn</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""CNN模型"""</span></span><br><span class="line">        <span class="comment"># 词向量映射</span></span><br><span class="line">        <span class="keyword">with</span> tf.device(<span class="string">'/cpu:0'</span>):</span><br><span class="line">            embedding = tf.get_variable(<span class="string">'embedding'</span>, [self.config.vocab_size, self.config.embedding_dim])</span><br><span class="line">            embedding_inputs = tf.nn.embedding_lookup(embedding, self.input_x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"cnn"</span>):</span><br><span class="line">            <span class="comment"># CNN layer 3*3</span></span><br><span class="line">            conv_1 = tf.layers.conv1d(embedding_inputs, self.config.num_filters, self.config.kernel_size, name=<span class="string">'conv_1'</span>)</span><br><span class="line">            <span class="comment"># global max pooling layer</span></span><br><span class="line">            gmp_1 = tf.reduce_max(conv_1, reduction_indices=[<span class="number">1</span>], name=<span class="string">'gmp_1'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"score"</span>):</span><br><span class="line">            <span class="comment"># 全连接层，后面接dropout以及relu激活</span></span><br><span class="line">            fc_1 = tf.layers.dense(gmp_1, self.config.hidden_dim, name=<span class="string">'fc_1'</span>)</span><br><span class="line">            fc_1 = tf.contrib.layers.dropout(fc_1, self.keep_prob)</span><br><span class="line">            fc_1 = tf.nn.relu(fc_1)</span><br><span class="line">            <span class="comment"># 分类器</span></span><br><span class="line">            self.logits = tf.layers.dense(fc_1, self.config.num_classes, name=<span class="string">'fc_2'</span>)</span><br><span class="line">            self.y_pred_cls = tf.argmax(tf.nn.softmax(self.logits), <span class="number">1</span>)  <span class="comment"># 预测类别</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"optimize"</span>):</span><br><span class="line">            <span class="comment"># 损失函数，交叉熵</span></span><br><span class="line">            cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits=self.logits, labels=self.input_y)</span><br><span class="line">            self.loss = tf.reduce_mean(cross_entropy)</span><br><span class="line">            <span class="comment"># 优化器</span></span><br><span class="line">            self.optim = tf.train.AdamOptimizer(learning_rate=self.config.learning_rate).minimize(self.loss)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"accuracy"</span>):</span><br><span class="line">            <span class="comment"># 准确率</span></span><br><span class="line">            correct_pred = tf.equal(tf.argmax(self.input_y, <span class="number">1</span>), self.y_pred_cls)</span><br><span class="line">            self.acc = tf.reduce_mean(tf.cast(correct_pred, tf.float32))</span><br></pre></td></tr></table></figure>
<h3 id="训练与验证"><a href="#训练与验证" class="headerlink" title="训练与验证"></a>训练与验证</h3><p>运行 <code>python run_cnn.py train</code>，可以开始训练。</p>
<blockquote>
<p>若之前进行过训练，请把tensorboard/textcnn删除，避免TensorBoard多次训练结果重叠。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Configuring CNN model...</span><br><span class="line">Configuring TensorBoard and Saver...</span><br><span class="line">Loading training and validation data...</span><br><span class="line">Time usage: 0:00:14</span><br><span class="line">Training and evaluating...</span><br><span class="line">Epoch: 1</span><br><span class="line">Iter:      0, Train Loss:    8.9, Train Acc:   0.00%, Val Loss:    8.9, Val Acc:   0.00%, Time: 0:00:15</span><br><span class="line">Iter:    100, Train Loss:    7.1, Train Acc:   3.12%, Val Loss:    7.3, Val Acc:   1.75%, Time: 0:00:22 *</span><br><span class="line">Iter:    200, Train Loss:    6.7, Train Acc:   9.38%, Val Loss:    6.9, Val Acc:   7.68%, Time: 0:00:29 *</span><br><span class="line">Iter:    300, Train Loss:    5.8, Train Acc:  20.31%, Val Loss:    6.4, Val Acc:  15.43%, Time: 0:00:35 *</span><br><span class="line">Iter:    400, Train Loss:    5.8, Train Acc:  18.75%, Val Loss:    5.8, Val Acc:  23.33%, Time: 0:00:42 *</span><br><span class="line">Iter:    500, Train Loss:    5.4, Train Acc:  29.69%, Val Loss:    5.3, Val Acc:  30.68%, Time: 0:00:49 *</span><br><span class="line">Iter:    600, Train Loss:    4.1, Train Acc:  40.62%, Val Loss:    5.0, Val Acc:  37.10%, Time: 0:00:56 *</span><br><span class="line">Iter:    700, Train Loss:    4.3, Train Acc:  40.62%, Val Loss:    4.7, Val Acc:  39.64%, Time: 0:01:03 *</span><br><span class="line">Iter:    800, Train Loss:    4.1, Train Acc:  48.44%, Val Loss:    4.5, Val Acc:  43.47%, Time: 0:01:10 *</span><br><span class="line">Iter:    900, Train Loss:    4.2, Train Acc:  37.50%, Val Loss:    4.3, Val Acc:  45.70%, Time: 0:01:17 *</span><br><span class="line">Iter:   1000, Train Loss:    3.0, Train Acc:  56.25%, Val Loss:    4.1, Val Acc:  48.36%, Time: 0:01:23 *</span><br><span class="line">Iter:   1100, Train Loss:    4.3, Train Acc:  50.00%, Val Loss:    4.0, Val Acc:  50.28%, Time: 0:01:30 *</span><br><span class="line">Iter:   1200, Train Loss:    3.5, Train Acc:  53.12%, Val Loss:    3.9, Val Acc:  51.55%, Time: 0:01:37 *</span><br><span class="line">Iter:   1300, Train Loss:    4.2, Train Acc:  50.00%, Val Loss:    3.8, Val Acc:  52.80%, Time: 0:01:44 *</span><br><span class="line">Iter:   1400, Train Loss:    2.6, Train Acc:  59.38%, Val Loss:    3.6, Val Acc:  54.80%, Time: 0:01:51 *</span><br><span class="line">Iter:   1500, Train Loss:    4.0, Train Acc:  51.56%, Val Loss:    3.5, Val Acc:  55.76%, Time: 0:01:58 *</span><br><span class="line">Iter:   1600, Train Loss:    4.1, Train Acc:  46.88%, Val Loss:    3.5, Val Acc:  56.52%, Time: 0:02:05 *</span><br><span class="line">Iter:   1700, Train Loss:    3.0, Train Acc:  59.38%, Val Loss:    3.4, Val Acc:  57.38%, Time: 0:02:12 *</span><br><span class="line">Iter:   1800, Train Loss:    2.9, Train Acc:  60.94%, Val Loss:    3.3, Val Acc:  58.31%, Time: 0:02:19 *</span><br><span class="line">Iter:   1900, Train Loss:    3.8, Train Acc:  50.00%, Val Loss:    3.2, Val Acc:  58.58%, Time: 0:02:26 *</span><br><span class="line">Iter:   2000, Train Loss:    3.9, Train Acc:  54.69%, Val Loss:    3.2, Val Acc:  59.42%, Time: 0:02:33 *</span><br><span class="line">.</span><br><span class="line">.#训练迭代10次后</span><br><span class="line">. </span><br><span class="line">Epoch: 11</span><br><span class="line">Iter:  20800, Train Loss:  0.013, Train Acc: 100.00%, Val Loss:   0.44, Val Acc:  92.10%, Time: 0:24:38 *</span><br><span class="line">Iter:  20900, Train Loss:  0.012, Train Acc: 100.00%, Val Loss:   0.44, Val Acc:  92.15%, Time: 0:24:45 *</span><br><span class="line">Iter:  21000, Train Loss:  0.025, Train Acc:  98.44%, Val Loss:   0.47, Val Acc:  91.75%, Time: 0:24:51</span><br><span class="line">Iter:  21100, Train Loss:  0.026, Train Acc: 100.00%, Val Loss:   0.43, Val Acc:  92.22%, Time: 0:24:58 *</span><br><span class="line">Iter:  21200, Train Loss:  0.094, Train Acc:  98.44%, Val Loss:   0.46, Val Acc:  91.80%, Time: 0:25:05</span><br><span class="line">Iter:  21300, Train Loss:   0.17, Train Acc:  98.44%, Val Loss:   0.45, Val Acc:  92.25%, Time: 0:25:12 *</span><br><span class="line">Iter:  21400, Train Loss:  0.094, Train Acc:  96.88%, Val Loss:   0.46, Val Acc:  92.18%, Time: 0:25:18</span><br><span class="line">Iter:  21500, Train Loss:  0.029, Train Acc:  98.44%, Val Loss:   0.45, Val Acc:  91.92%, Time: 0:25:25</span><br><span class="line">Iter:  21600, Train Loss:   0.11, Train Acc:  98.44%, Val Loss:   0.44, Val Acc:  92.10%, Time: 0:25:31</span><br><span class="line">Iter:  21700, Train Loss:  0.099, Train Acc:  98.44%, Val Loss:   0.46, Val Acc:  91.93%, Time: 0:25:38</span><br><span class="line">Iter:  21800, Train Loss:  0.069, Train Acc:  98.44%, Val Loss:   0.46, Val Acc:  91.68%, Time: 0:25:45</span><br><span class="line">Iter:  21900, Train Loss:  0.097, Train Acc:  96.88%, Val Loss:   0.46, Val Acc:  91.90%, Time: 0:25:51</span><br><span class="line">Iter:  22000, Train Loss:  0.024, Train Acc:  98.44%, Val Loss:   0.45, Val Acc:  92.13%, Time: 0:25:58</span><br><span class="line">Iter:  22100, Train Loss:   0.01, Train Acc: 100.00%, Val Loss:   0.43, Val Acc:  92.14%, Time: 0:26:05</span><br><span class="line">Iter:  22200, Train Loss:   0.11, Train Acc:  98.44%, Val Loss:   0.43, Val Acc:  92.25%, Time: 0:26:11</span><br><span class="line">Iter:  22300, Train Loss:  0.011, Train Acc: 100.00%, Val Loss:   0.43, Val Acc:  92.21%, Time: 0:26:18</span><br><span class="line">No optimization for a long time, auto-stopping...</span><br></pre></td></tr></table></figure>


<p>在验证集上的最佳效果为92.25%.</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>运行 <code>python run_cnn.py test</code> 在测试集上进行测试。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Configuring CNN model...</span><br><span class="line">Loading test data...</span><br><span class="line">Testing...</span><br><span class="line">Test Loss:   0.46, Test Acc:  91.85%</span><br></pre></td></tr></table></figure>
<p>在测试集上的准确率达到了91.85%。</p>
<h3 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h3><p>运行 <code>python run_cnn.py predict</code> 在预测集上进行预测。</p>
<p>预测集命名为<code>name2category.predict.txt</code>,放入data中的name2category文件夹，每行一个产品名称。</p>
<p>输出在目录文件夹，名称为<code>predicted_data.txt</code></p>
<h3 id="功能调用"><a href="#功能调用" class="headerlink" title="功能调用"></a>功能调用</h3><p>调用方法为:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> run_cnn <span class="keyword">import</span> name2subcategory</span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">'乔思伯 JONSBO CR-201RGB版本RGBCPU散热器（黑色/多平台/4热管/温控/12CM风扇/支持AURARGB/附硅脂）'</span>] </span><br><span class="line">a = name2subcategory()</span><br><span class="line">category = a.namelyst_predict(name_list)</span><br></pre></td></tr></table></figure>

<p>输入一个含有多个产品名称的列表，返回一个各名称子类的列表。</p>
]]></content>
  </entry>
  <entry>
    <title>重装系统</title>
    <url>/2020/03/07/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="WIN10迁移C盘和崩溃还原系统总结"><a href="#WIN10迁移C盘和崩溃还原系统总结" class="headerlink" title="WIN10迁移C盘和崩溃还原系统总结"></a>WIN10迁移C盘和崩溃还原系统总结</h1><p>这几天为了清理C盘一直动系统的文件，导致经常重启，其中主要还是迁移C盘Users数据到其他非系统盘操作不当导致开机系统加载不了用户信息，下面具体记录这两方面。</p>
<ol>
<li><p>迁移资料的关键还是利用硬链接将物理地址位于其他盘的Users用户信息映射到C盘的逻辑名上。下面只简单记录一下命令。</p>
</li>
<li><p><strong>最关键的还是利用系统的保命文件———Backup.wim重刷系统</strong><br>一个通过Dism++文件创建的镜像文件，尽量将此文件放于非系统盘，有此文件基本可以不用借助任何外部工具无限重刷回原系统。</p>
</li>
</ol>
<p>上面两者都需要通过高级重启进入一个纯命令行的Dos界面，在此可以几乎不受权限限制对文件<strong>删除复制</strong>等操作<br><strong>进入 <em>系统设置 -&gt; 升级&amp;安全 -&gt; 恢复 -&gt; 高级重启 -&gt; 立刻重启</em> 来重启电脑到恢复模式；</strong><br><img src="https://img-blog.csdnimg.cn/20191022130842551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dhd2FpblRreQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>后面就是选择 <strong><em>疑难解答-&gt;高级-&gt;命令提示符</em></strong>（现在不便具体演示，网上有很多相关教程）</p>
<p><strong>注意</strong>：在Dos环境下盘符名称可能和平时不一样(我的OS就变成F盘了)，首先就是平时被隐藏的X盘，其他最好先通过 <strong>diskpart</strong>命令进入管理磁盘工具，通过<strong>list volume</strong>查看所有盘符信息，<strong>exit</strong>退出。同时利用<strong>cd 对应硬盘</strong> 进入后再用<strong>dir</strong>命令确认文件是否正确。</p>
<h2 id="C盘Users迁移其他盘"><a href="#C盘Users迁移其他盘" class="headerlink" title="C盘Users迁移其他盘"></a>C盘Users迁移其他盘</h2><p>有几种方法可用，原则就是要先保证在非现用户使用环境下进行，为了避免各种权限要求，我是直接开机进入Dos命令行：</p>
<ol>
<li>将Users复制与其他盘.<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">复制C:\Users下的所有文件到D:\Users </span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数说明：此命令为Windows的“强制文件拷贝”命令。</span></span><br><span class="line"><span class="comment">//      /E 表示拷贝文件时包含子目录（包括空目录）</span></span><br><span class="line"><span class="comment">//      /COPYALL 表示拷贝所有文件信息</span></span><br><span class="line"><span class="comment">//      /XJ 表示不包括Junction points（默认是包括的）</span></span><br><span class="line"><span class="comment">//      /XD "F:\Users\Administrator" 表示不包括指定的目录,此处指定目录为："F:\Users\Administrator"</span></span><br><span class="line">robocopy <span class="string">"F:\Users"</span> <span class="string">"D:\Users"</span> /E /COPYALL /XJ /XD <span class="string">"F:\Users\Administrator"</span></span><br></pre></td></tr></table></figure></li>
<li>删除用户文件<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数说明：此命令删除指定目录。</span></span><br><span class="line"><span class="comment">//      /S 删除指定目录及其中的所有文件,用于删除目录树。</span></span><br><span class="line"><span class="comment">//      /Q 安静模式,删除时不询问。 </span></span><br><span class="line"><span class="built_in">rmdir</span>  <span class="string">"F:\Users"</span> /S /Q</span><br></pre></td></tr></table></figure></li>
<li>硬链接将C盘新Users链接到所备份的文件<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数说明：此命令创建符号连接。</span></span><br><span class="line"><span class="comment">//      /J 连接类型为目录连接</span></span><br><span class="line">mklink  /J <span class="string">"F:\Users"</span> <span class="string">"D:\Users"</span></span><br></pre></td></tr></table></figure>
期间可能复制一部分文件不成功，我看不太重要就强制继续，删除可能不干净，也可采用ren 命令将Users文件夹重命名，保证和硬链接不冲突即可，后面再处理，不用自己创建新的Users，mklink会自动生成，自己要创建可用<strong>md</strong>命令。<h2 id="备份以及还原系统"><a href="#备份以及还原系统" class="headerlink" title="备份以及还原系统"></a>备份以及还原系统</h2><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4>有几种方式，我用的dism++ 备份，也可采用命令行.</li>
<li>命令行：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//初始备份（例如：把 C 分区的系统备份到 D 分区的 1文件夹中，备份文件名为Backup.wim）：</span></span><br><span class="line">    Dism /Capture-Image /ImageFile:D:\<span class="number">1</span>\Backup.wim /CaptureDir:C:\ /Name:Backup<span class="number">-1</span> /Description:<span class="number">0000</span><span class="number">-00</span><span class="number">-00</span></span><br><span class="line"><span class="comment">// 命令解释：</span></span><br><span class="line"><span class="comment">//    /Capture-Image - 指定捕获映像。</span></span><br><span class="line"><span class="comment">//    /ImageFile: - 指定映像文件路径。                </span></span><br><span class="line"><span class="comment">//    /CaptureDir: - 指定捕获目录。</span></span><br><span class="line"><span class="comment">//    /Name: - 指定名称。此项不能省略。</span></span><br><span class="line"><span class="comment">//    /Description: - 指定描述。描述是为了说明这次备份的具体情况，我们这里用了时间。此项可省略。</span></span><br></pre></td></tr></table></figure></li>
<li>利用软件dism++ </li>
</ol>
<p><strong>选择恢复-&gt;系统备份</strong><br><img src="https://img-blog.csdnimg.cn/20191022142147367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dhd2FpblRreQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择保存的硬盘并输入保存的名字：<br><img src="https://img-blog.csdnimg.cn/20191022142851436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dhd2FpblRreQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>等待完成即可。<br><strong>注</strong>：最好备份前清理C盘，保证电脑最好状态，这也是个人用电脑的好习惯。</p>
<h2 id="系统还原"><a href="#系统还原" class="headerlink" title="系统还原"></a>系统还原</h2><p>具体参考以下<br> <a href="https://answers.microsoft.com/zh-hans/windows/forum/windows_10-update/%E7%94%A8-dism/a3ea0d10-036c-41ff-8bb9-350c2bda525b" target="_blank" rel="noopener">用 DISM 命令备份与还原 Windows 系统</a>.<br>关键指令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//系统还原（例如：把 D:\Backup.wim 中备份还原到 C分区）：</span></span><br><span class="line">    Dism /Apply-Image /ImageFile:D:\Backup.wim/Index:<span class="number">1</span> /ApplyDir:C:\</span><br><span class="line"> <span class="comment">//   命令解释：</span></span><br><span class="line"> <span class="comment">//   /Apply-Image - 指定应用映像。</span></span><br><span class="line"> <span class="comment">//   /ApplyDir: - 指定应用目录。</span></span><br><span class="line"> <span class="comment">//  /Index: - 指定索引。此项不能省略。</span></span><br></pre></td></tr></table></figure>
<p><strong>因 Dism 安装 WIM 映像不会像 Ghost 那样格式化磁盘，个人就遇上第一次成功还原后，后面还原遇上无法访问的 错误5，所以先格式化系统盘是最稳妥的。</strong><br>格式化指令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">format C:/q</span><br><span class="line"><span class="comment">//    /Q  执行快速格式化。</span></span><br></pre></td></tr></table></figure>
<p>格式化需谨慎，尽量多<strong>dir</strong>命令查看确认分区是否正确，毕竟系统格式化了马上就还原，资料格式化就啥也没了。</p>
<p>格式化完成再按上述命令完成还原，几乎不会有问题，一般等待十几分钟，完成后就可以关闭命令窗口重启电脑，过会就会看见熟悉输入密码页面了。</p>
<p>到此一个完整还原周期完成，平时尽量养成将数据置于非系统盘之下的习惯，这样除了减小C盘容量压力，也可使重装系统带来的影响最小，某种程度保证自己电脑使用稳定性。</p>
<p> 第一次文档记录，为以后系统崩溃提供解决办法，也是向大家分享折腾了两天的错误经验，虽然都是可以google到的方法，但收集信息排错需要时间精力。<strong>格式化C区-&gt;dos还原系统</strong>是个人使用最快捷方便的恢复操作，<br>若有错误或纰漏多多指正，还有，小白谨慎使用以上方法，我不能保证错误操作对系统不会造成损失。</p>
]]></content>
  </entry>
  <entry>
    <title>Gawain&#39;s Blog</title>
    <url>/2020/03/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
